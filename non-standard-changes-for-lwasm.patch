From 43392e79e82e254c03d6bbd1de387dc49b31efbe Mon Sep 17 00:00:00 2001
From: Tim Stahlhut <stahta01@gmail.com>
Date: Mon, 8 May 2023 09:41:53 -0400
Subject: code: Non-standard changes for lwasm

Re-write conditional logic for lwasm

---
 bas.asm    | 144 ++++++++++++++++++++---------------------
 disk.asm   | 184 ++++++++++++++++++++++++++---------------------------
 extbas.asm |  72 ++++++++++-----------
 supbas.asm |  78 +++++++++++------------
 4 files changed, 239 insertions(+), 239 deletions(-)

diff --git a/bas.asm b/bas.asm
index 4be64d8..d5eaf6f 100644
--- a/bas.asm
+++ b/bas.asm
@@ -41,7 +41,7 @@ LA00E           LDS         #LINBUF+LBUFMX+1 ; SET STACK TO TOP OF LINE INPUT BU
                 BNE         BACDST          ; NO - DO A COLD START
                 JMP         ,X              ; YES, G0 THERE
 ; -----------------------------------------------------------------------------
-                if          VERBAS<11
+                IFLT        VERBAS-11
 ; -----------------------------------------------------------------------------
 RESVEC          LDU         #LA00E          ; BASIC WARM START ENTRY (RESET)
 LA02A           CLRB                        ;
@@ -118,10 +118,10 @@ LA0BA           STX         TOPRAM          ; SET TOP OF RAM POINTER
                 STX         FRETOP          ; SAVE NEW TOP OF FREE RAM
                 TFR         X,S             ; PUT STACK THERE (AT MEMEND-200)
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 ; -----------------------------------------------------------------------------
-                if          VERBAS<20
+                IFLT        VERBAS-20
 ; -----------------------------------------------------------------------------
 RESVEC          LEAY        <LA00E,PCR      ; POINT Y TO WARM START CHECK CODE
 LA02A           LDX         #PIA1           ; POINT X TO PIA1
@@ -158,7 +158,7 @@ LA056           STA         ,U++            ; ZERO OUT SAM CONTROL REGISTER BIT
 LA05E           TFR         B,DP            ; SET DIRECT PAGE TO ZERO
                 LDB         #$04            ; USE AS A MASK TO CHECK RAMSZ INPUT
 ; -----------------------------------------------------------------------------
-                if          VERBAS<13
+                IFLT        VERBAS-13
 ; -----------------------------------------------------------------------------
                 STA         -2,X            ; SET RAMSZ STROBE HIGH
                 BITB        2,X             ; CHECK RAMSZ INPUT
@@ -168,7 +168,7 @@ LA05E           TFR         B,DP            ; SET DIRECT PAGE TO ZERO
                 BEQ         LA070           ; BRANCH IF JUMPER SET FOR 64K RAMS
                 LEAU        -2,U            ; ADJUST POINTER TO SET SAM FOR 16K RAMS
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 CLR         -2,X
                 BITB        2,X
@@ -179,7 +179,7 @@ LA05E           TFR         B,DP            ; SET DIRECT PAGE TO ZERO
 LA06E           NOP                         ;
                 NOP                         ;
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 LA070           STA         -3,U            ; PROGRAM SAM FOR 16K OR 64K RAMS
 LA072           JMP         ,Y              ; GO DO A WARM OR COLD START
@@ -201,7 +201,7 @@ LA084           LDA         2,X             ; LOOK FOR END OF MEMORY
                 BRA         LA084           ; KEEP LOOKING FOR END OF RAM
 
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 RESVEC          LEAY        <LA00E,PCR      ; POINT Y TO WARM START CHECK CODE
 LA02A           LDA         #$3A
@@ -259,7 +259,7 @@ LA077           CLR         ,--X            ; MOVE POINTER DOWN TWO-CLEAR BYTE
                 NOP                         ;
                 NOP                         ;
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 LA093           STX         TOPRAM          ; SAVE ABSOLUTE TOP OF RAM
@@ -285,14 +285,14 @@ LA0C0           STA         ,X+             ; FILL THE RAM VECTORS WITH RTS
                 BNE         LA0C0           ; BRANCH IF NOT DONE
                 STA         LINHDR-1        ; PUT RTS IN LINHDR-1
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 
                 JSR         >LAD19          ; G0 DO A NEW
 
 ; -----------------------------------------------------------------------------
-                if          VERBAS<20
+                IFLT        VERBAS-20
 ; -----------------------------------------------------------------------------
                 LDX         #$4558          ; ASCII EX (FIRST TWO LETTERS OF EXTENDED)
 LA0CE           CMPX        EXBAS           ; SEE IF EXTENDED ROM IS THERE
@@ -303,7 +303,7 @@ LA0CE           CMPX        EXBAS           ; SEE IF EXTENDED ROM IS THERE
                 LDX         #BAWMST         ; WARM START ADDRESS
                 STX         RSTVEC          ; SAVE IT
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 JMP         >$8002          ; CPYROM copy rom to ram (coco3)
                 PSHS        X,B
@@ -315,7 +315,7 @@ LA0D6           JSR         >LA199
                 JMP         >LA1B9
                 FCB         $72
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 
@@ -330,15 +330,15 @@ BAWMST          NOP                         ;  NOP REQD FOR WARM START
 
 
 ; -----------------------------------------------------------------------------
-                if          VERBAS<20
+                IFLT        VERBAS-20
 ; -----------------------------------------------------------------------------
                 JSR         >CLRSCRN        ; CLEAR SCREEN
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 JSR         >CLS            ; CLEAR SCREEN
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 
@@ -352,15 +352,15 @@ BFRQSV          TST         PIA1+3          ; CARTRIDGE INTERRUPT?
 
 
 ; -----------------------------------------------------------------------------
-                if          VERBAS<20
+                IFLT        VERBAS-20
 ; -----------------------------------------------------------------------------
 LA0FC           JSR         >LA7D1          ; KEEP DELAYING
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 LA0FC           JSR         >$8C28          ; ?
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 
@@ -370,15 +370,15 @@ LA0FC           JSR         >$8C28          ; ?
 
 
 ; -----------------------------------------------------------------------------
-                if          VERBAS<11
+                IFLT        VERBAS-11
 ; -----------------------------------------------------------------------------
 LA102           LDU         #LA108
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 LA102           LEAY        <LA108,PCR      ; Y = ROM-PAK START UP VECTOR
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 JMP         >LA02A          ; GO DO INITIALIZATION
 LA108           CLR         RSTFLG          ; CLEAR WARM START FLAG
@@ -391,15 +391,15 @@ LA10D           FCB         18              ; MID BAND PARTITION OF 1200/2400 HE
                 FDB         128             ; NUMBER OF 55S TO CASSETTE LEADER
                 FCB         11              ; CURSOR BLINK DELAY
 ; -----------------------------------------------------------------------------
-                if          VERBAS<12
+                IFLT        VERBAS-12
 ; -----------------------------------------------------------------------------
                 FDB         $57             ; LINE PRINTER BAUD RATE
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 FDB         $58             ; CONSTANT FOR 600 BAUD VER 1.2 & UP
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 FDB         1               ; PRINTER CARRIAGE RETURN DELAY
                 FCB         16              ; TAB FIELD WIDTH
@@ -434,47 +434,47 @@ LA145           FDB         LAA29           ; POINTS TO SECONDARY FUNCTION JUMP
 ; COPYRIGHT MESSAGES
 LA147           FCC         "COLOR BASIC "
 ; -----------------------------------------------------------------------------
-                if          VERBAS<11
+                IFLT        VERBAS-11
 ; -----------------------------------------------------------------------------
                 FCC         "1.0"
 ; -----------------------------------------------------------------------------
-                else
-                if          VERBAS<12
+                ELSE
+                IFLT        VERBAS-12
 ; -----------------------------------------------------------------------------
                 FCC         "1.1"
 ; -----------------------------------------------------------------------------
-                else
-                if          VERBAS<13
+                ELSE
+                IFLT        VERBAS-13
 ; -----------------------------------------------------------------------------
                 FCC         "1.2"
 ; -----------------------------------------------------------------------------
-                else
-                if          VERBAS<20
+                ELSE
+                IFLT        VERBAS-20
 ; -----------------------------------------------------------------------------
                 FCC         "1.3"
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 FCC         "1.2"           ; for some reason, coco3 has "1.2" in there ;
 ; but we are still calling it VERBAS=20 for our conditional assemble
 ; -----------------------------------------------------------------------------
-                endif
-                endif
-                endif
-                endif
+                ENDC
+                ENDC
+                ENDC
+                ENDC
 ; -----------------------------------------------------------------------------
 LA156           FCB         CR
 LA157           FCC         "(C) 198"
 ; -----------------------------------------------------------------------------
-                if          VERBAS<12
+                IFLT        VERBAS-12
 ; -----------------------------------------------------------------------------
                 FCC         "0"
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 FCC         "2"
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 FCC         " TANDY"
 LA165           FCB         $00
@@ -526,7 +526,7 @@ LA1BF           PULS        B,X,PC
 ; THIS ROUTINE GETS A KEYSTROKE FROM THE KEYBOARD IF A KEY
 ; IS DOWN. IT RETURNS ZERO TRUE IF THERE WAS NO KEY DOWN.
 ; -----------------------------------------------------------------------------
-                if          VERBAS<11
+                IFLT        VERBAS-11
 ; -----------------------------------------------------------------------------
 KEYIN1          EQU         *               ; needed symbol
 KEYIN           PSHS        B,X             ; SAVE REGISTERS
@@ -629,10 +629,10 @@ LA264           ASLB                        ;  MULT ACCB BY 2 - THERE ARE 2 ENTR
 LA26A           LDB         B,X             ; GET ASCII CODE FROM CONTROL TABLE
                 BRA         LA20E           ; GO CHECK DEBOUNCE
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 ; -----------------------------------------------------------------------------
-                if          VERBAS<12
+                IFLT        VERBAS-12
 ; -----------------------------------------------------------------------------
 KEYIN1          EQU         *               ; needed symbol
 KEYIN           PSHS        B,X,U           ; SAVE REGISTERS
@@ -736,14 +736,14 @@ LA269           LDB         B,X             ; GET ASCII CODE FROM CONTROL TABLE
                 BRA         LA20B           ; GO CHECK DEBOUNCE
                 FCB         0               ; WASTED SPACE IN VERSION 1.1
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 
 
 
 
 ; -----------------------------------------------------------------------------
-                if          VERBAS<20
+                IFLT        VERBAS-20
 ; -----------------------------------------------------------------------------
 KEYIN1          CLR         PIA0+2          ; CLEAR COLUMN STROBE
                 LDA         PIA0            ; READ KEY ROWS
@@ -751,7 +751,7 @@ KEYIN1          CLR         PIA0+2          ; CLEAR COLUMN STROBE
                 ASLA                        ;  SHIFT OFF JOYSTICK DATA
                 BEQ         LA244           ; RETURN IF NO KEYS OR FIRE BUTTONS DOWN
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 ; THIS ROUTINE GETS A KEYSTROKE FROM THE KEYBOARD IF A KEY
 ; IS DOWN. IT RETURNS ZERO TRUE IF THERE WAS NO KEY DOWN.
@@ -765,7 +765,7 @@ KEYIN1          JMP         >KEYIN
                 RTS
                 RTS
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 
@@ -865,10 +865,10 @@ LA264           ASLB                        ;  MULT ACCB BY 2 - THERE ARE 2 ENTR
 LA26A           LDB         B,X             ; GET ASCII CODE FROM CONTROL TABLE
                 BRA         LA20C           ; GO CHECK DEBOUNCE
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 ; CONTROL TABLE UNSHIFTED, SHIFTED VALUES
@@ -919,7 +919,7 @@ LA2AA           STB         BLKTYP          ; BLOCK NUMBER
 LA2BF           PSHS        X,B,A,CC        ; SAVE REGISTERS AND INTERRUPT STATUS
                 ORCC        #$50            ; DISABLE IRQ,FIRQ
 ; -----------------------------------------------------------------------------
-                if          VERBAS<11
+                IFLT        VERBAS-11
 ; -----------------------------------------------------------------------------
                 BSR         LA2FB           ; SET OUTPUT TO MARKING
                 ASLA                        ;  SEND 7 BITS AND ONE STOP BIT (BIT 7=0)
@@ -954,10 +954,10 @@ LA2F3           LDB         PIA1+2          ; WAIT FOR HANDSHAKE
                 BCS         LA2F3           ; NOT YET READY
                 PULS        B,X,PC          ; RESTORE REGISTERS
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 ; -----------------------------------------------------------------------------
-                if          VERBAS<12
+                IFLT        VERBAS-12
 ; -----------------------------------------------------------------------------
                 BSR         LA2FB           ; SET OUTPUT TO MARKING
                 CLRB                        ;
@@ -989,7 +989,7 @@ LA2ED           LDB         PIA1+2          ; WAIT FOR HANDSHAKE
 LA2F3           PULS        B,X,PC          ; RESTORE REGISTERS
                 FDB         0,0,0           ; WASTED SPACE IN VERSION 1.1
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 LA2C3           LDB         PIA1+2          ; GET RS 232 STATUS
                 LSRB                        ;  SHIFT RS 232 STATUS BIT INTO CARRY
@@ -1023,10 +1023,10 @@ LA2F3           LDB         PIA1+2          ; WAIT FOR HANDSHAKE
                 BCS         LA2F3           ; NOT YET READY
                 PULS        B,X,PC          ; RESTORE REGISTERS
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 LA2FB           LDB         #2              ; SET RS232 OUTPUT HIGH (MARKING)
@@ -1203,15 +1203,15 @@ LA42D           JSR         >RVEC8          ; HOOK INTO RAM
                 BNE         LA449           ; NO
                 LDA         CINCTR          ; GET CHARACTER BUFFER CTR
 ; -----------------------------------------------------------------------------
-                if          VERBAS<11
+                IFLT        VERBAS-11
 ; -----------------------------------------------------------------------------
                 BEQ         LA449
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 BEQ         LA444           ; WRITE END OF PROG BLOCK IF BUFFER EMPTY
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 JSR         >LA2A8          ; WRITE A BLOCK TO TAPE
 LA444           LDB         #$FF            ; END OF FILE TYPE BLOCK NUMBER
@@ -1567,16 +1567,16 @@ LA6E5           BNE         LA6ED           ; GOT AN ERROR ON READING IN BLOCK
                 LDA         BLKTYP          ; GET BLOCK NUMBER
                 NEGA                        ;  CHECK FOR LAST BLOCK
 ; -----------------------------------------------------------------------------
-                if          VERBAS<11
+                IFLT        VERBAS-11
 ; -----------------------------------------------------------------------------
                 BMI         LA6F3           ; RETURN IF NOT AN END OF PROGRAM BLOCK
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 ; make cursor in upper left blink
                 BMI         LA700           ; RETURN IF NOT AN END OF PROGRAM BLOCK
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 DECA                        ;  IF BLOCK NUMBER WAS $FF, ACCA IS NOW ZERO - THIS WILL
 ; CAUSE CLOAD TO IGNORE ERRORS IN THE
@@ -3155,15 +3155,15 @@ LB22F           JSR         >LB3A2          ; SET CARRY IF NOT ALPHA
                 BEQ         LB27C           ; YES - GO PROCESS THE MINUS OPERATOR
                 CMPA        #$AB            ; PLUS TOKEN
 ; -----------------------------------------------------------------------------
-                if          VERBAS<12
+                IFLT        VERBAS-12
 ; -----------------------------------------------------------------------------
                 BEQ         LB228           ; YES - GET ANOTHER CHARACTER
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 BEQ         LB223           ; YES - GET ANOTHER CHARACTER
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 CMPA        #'"'            ; STRING DELIMITER?
                 BNE         LB24E           ; NO
@@ -3412,7 +3412,7 @@ LB3E6           JSR         >LB141          ; GO EVALUATE NUMERIC EXPRESSION
 LB3E9           LDA         FP0SGN          ; GET FPA0 MANTISSA SIGN
                 BMI         LB44A           ; FC ERROR IF NEGATIVE NUMBER
 ; -----------------------------------------------------------------------------
-                if          VERBAS<12
+                IFLT        VERBAS-12
 ; -----------------------------------------------------------------------------
 INTCNV          LDA         FP0EXP          ; GET FPA0 EXPONENT
                 CMPA        #$90            ; COMPARE TO 32768 - LARGEST INTEGER
@@ -3447,7 +3447,7 @@ LB408           LDX         VARNAM          ; GET VARIABLE NAME
                 STA         VALTYP          ; FLAG - LEAVE DIMENSION LENGTH ON STACK
                 STB         DIMFLG
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 ; CONVERT FPA0 TO A SIGNED TWO BYTE INTEGER; RETURN VALUE IN ACCD
 INTCNV          JSR         >LB143          ; TM ERROR IF STRING VARIABLE
@@ -3482,7 +3482,7 @@ LB40A           LDX         VARNAM          ; GET VARIABLE NAME
                 PULS        A,B             ; RESTORE VARIABLE TYPE AND ARRAY
                 STD         DIMFLG          ; FLAG - LEAVE DIMENSION LENGTH ON STACK
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 LDX         ARYTAB          ; GET START OF ARRAYS
 LB42A           CMPX        ARYEND          ; COMPARE TO END OF ARRAYS
@@ -4313,15 +4313,15 @@ LB9CD           TFR         A,B             ; PUT EXPONENT OF FPA1 INTO ACCB
                 SUBB        FP0EXP          ; SUBTRACT EXPONENT OF FPA0 FROM EXPONENT OF FPA1
                 BEQ         LBA3F           ; BRANCH IF EXPONENTS ARE EQUAL
 ; -----------------------------------------------------------------------------
-                if          VERBAS<12
+                IFLT        VERBAS-12
 ; -----------------------------------------------------------------------------
                 BMI         LB9E2           ; BRANCH IF EXPONENT FPA0 > FPA1
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 BCS         LB9E2           ; BRANCH IF EXPONENT FPA0 > FPA1
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 STA         FP0EXP          ; REPLACE FPA0 EXPONENT WITH FPA1 EXPONENT
                 LDA         FP1SGN          ; REPLACE FPA0 MANTISSA SIGN
@@ -5235,7 +5235,7 @@ LBFE6           FCB         $a1             ; '! ^ $80
 LBFF0           FDB         LA681           ; RESERVED
 
 ; -----------------------------------------------------------------------------
-                if          VERBAS<20
+                IFLT        VERBAS-20
 ; -----------------------------------------------------------------------------
 LBFF2           FDB         SW3VEC          ; SWI3
 LBFF4           FDB         SW2VEC          ; SWI2
@@ -5245,7 +5245,7 @@ LBFFA           FDB         SWIVEC          ; SWI
 LBFFC           FDB         NMIVEC          ; NMI
 LBFFE           FDB         RESVEC          ; RESET
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 FDB         $FEEE           ; INT.SWI3
                 FDB         $FEF1           ; INT.SWI2
@@ -5255,7 +5255,7 @@ LBFFE           FDB         RESVEC          ; RESET
                 FDB         $FEFD           ; INT.NMI
                 FDB         $8C1B           ; DLDBUG
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
                 END
diff --git a/disk.asm b/disk.asm
index 27acc19..3c0a58a 100644
--- a/disk.asm
+++ b/disk.asm
@@ -7,17 +7,17 @@
 ; $Id: $
 
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
 DHITOK          EQU         $E1             ; HIGHEST 1.1 DISK TOKEN
 CYEAR           EQU         '2
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 DHITOK          EQU         $E0             ; HIGHEST 1.0 DISK TOKEN
 CYEAR           EQU         '1
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 
@@ -115,12 +115,12 @@ FCBLFT          EQU         24              ; NUMBER OF CHARACTERS LEFT IN BUFFE
 DCNVEC          FDB         DSKCON          ; DSKCON POINTER
 DSKVAR          FDB         DCOPC           ; ADDRESS OF DSKCON VARIABLES
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
 DSINIT          FDB         DOSINI          ; DISK INITIALIZATION VECTOR
 DOSVEC          FDB         DOSCOM          ; DOS COMMAND VECTOR
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 ; ZERO OUT THE RAM USED BY DISK BASIC
 LRC00C          LDX         #DBUF0          ; POINT X TO START OF DISK RAM
@@ -152,12 +152,12 @@ LC03B           LDA         #$7E            ; OP CODE OF JMP INSTRUCTION
                 LDX         #DVEC22         ; GET ROM VALUE OF 'GET'/'PUT' RAM VECTOR
                 STX         RVEC22+1        ; SAVE IT IN RAM
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 LDX         #DVEC20         ; GET DISK COMMAND INTERPRETATION LOOP RAM VECTOR
                 STX         RVEC20+1        ; SAVE IN RAM VECTOR TABLE
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 ; INITIALIZE DISK BASIC'S USR VECTORS
                 LDX         #DUSRVC         ; POINT X TO START OF DISK BASIC USR VECTORS
@@ -200,7 +200,7 @@ LC061           STU         ,X++            ; SET USR VECTOR TO 'FC' ERROR
                 TFR         X,D             ; SAVE THE ADDRESS IN ACCD
                 TSTB                        ;  ON AN EVEN 256 BYTE BOUNDARY?
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 BEQ         LC0BD           ; YES
                 INCA                        ;  NO - ADD 256 TO ADDRESS
@@ -208,12 +208,12 @@ LC0BD           BITA        #$01            ; CHECK TO SEE IF ACCD IS ON AN EVEN
                 BEQ         LC0C2           ; 512 BYTE (ONE GRAPHIC PAGE) BOUNDARY - ADD
                 INCA                        ;  256 (INCA) TO IT IF NOT
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 BEQ         LC0C2           ; YES
                 INCA                        ;  NO - ADD 256 TO ADDRESS
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 LC0C2           TFR         A,B             ; COPY ACCA TO ACCB
                 ADDB        #$18            ; SAVE ENOUGH ROOM FOR 4 GRAPHICS PAGES (PCLEAR 4)
@@ -223,11 +223,11 @@ LC0C2           TFR         A,B             ; COPY ACCA TO ACCB
                 ADDA        #$06            ; ADD 1.5K (6 X 256 = ONE GRAPHICS PAGE)
                 STA         ENDGRP          ; SAVE NEW END OF GRAPHICS PAGE
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 JSR         [DSINIT]        ; INITIALIZE SWI2,3 JUMP ADDRESSES
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 BSR         LC0F0           ; GO INITIALIZE THE FLOPPY DISK CONTROLLER
                 ANDCC       #$AF            ; TURN ON IRQ AND FIRQ
@@ -253,15 +253,15 @@ LC0F0           CLR         NMIFLG          ; RESET NMI FLAG
 
 ; DISK BASIC COMMAND INTERP TABLES
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
 LC109           FCB         20              ; 20 DISK BASIC 1.1 COMMANDS
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 LC109           FCB         19              ; 19 DISK BASIC 1.0 COMMANDS
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 FDB         LC192           ; DISK BASIC'S COMMAND DICTIONARY
                 FDB         LC238           ; COMMAND JUMP TABLE
@@ -280,15 +280,15 @@ LC113           FDB         DVEC0,DVEC1,DVEC2
 
 ; DISK BASIC COPYRIGHT MESSAGE
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
 LC139           FCC         "DISK EXTENDED COLOR BASIC 1.1"
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 LC139           FCC         "DISK EXTENDED COLOR BASIC 1.0"
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 FCB         CR
                 FCC         "COPYRIGHT (C) 198"
@@ -321,11 +321,11 @@ LC192           FCS         "DIR"           ; CE
                 FCS         "DSKO$"         ; E0
 
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 FCS         "DOS"           ; E1
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 ; DISK BASIC COMMAND JUMP TABLE
@@ -351,11 +351,11 @@ LC1F1           FDB         DIR             ; DIR / CE
                 FDB         DSKO            ; DSKO$ / E0
 
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 FDB         DOS             ; DOS / E1
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 ; SECONDARY FUNCTION DICTIONARY TABLE
@@ -456,7 +456,7 @@ LC2C1           LEAS        $05,S           ; PURGE RETURN ADDRESS AND REGISTERS
                 BEQ         LC2EA           ; BRANCH IF END OF LINE
                 JSR         SYNCOMMA        ; SYNTAX CHECK FOR COMMA
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 JSR         >LB73D          ; EVALUATE EXPRESSION - RETURN IN (X)
                 TFR         X,D             ; SAVE RECORD NUMBER IN ACCD
@@ -466,14 +466,14 @@ LC2EA           LDD         FCBREC,X        ; GET RECORD NUMBER
                 BEQ         LC30B           ; 'BAD RECORD' ERROR IF RECORD NUMBER = 0
                 JSR         >LC685          ; INCREMENT RECORD NUMBER
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 JSR         LB3E6           ; EVALUATE EXPRESSION - RETURN IN ACCD
 LC2E6           LDX         FCBTMP          ; POINT X TO FCB
                 STD         FCBREC,X        ; SAVE RECORD NUMBER IN FCB
 LC2EA           JSR         >LC685          ; INCREMENT RECORD NUMBER
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 LDD         FCBRLN,X        ; GET RANDOM FILE RECORD LENGTH AND RANDOM FILE
                 LDX         FCBBUF,X        ; BUFFER POINTER AND SAVE THEM ON THE STACK -
@@ -617,17 +617,17 @@ LC3CF           PSHS        B               ; SAVE BYTE OFFSET ON STACK
 ; IF LAST USED SECTOR, CALCULATE HOW MANY BYTES ARE USED
 ; IF DATA IS BEING 'PUT' PASTH THE CURRENT END OF FILE
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 CMPD        #SECLEN         ; COMPARE TO ONE SECTOR'S LENGTH
                 BLS         LC405           ; BRANCH IF REMAINDER OF RECORD LENGTH WILL FIT IN THIS SECTOR
                 LDD         #SECLEN         ; FORCE NUMBER OF BYTES = ONE SECTOR LENGTH
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 ANDA        #$01
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 LC405           ORA         #$80            ; SET PRE-SAVED FLAG BIT - ALL PUT RECORDS ARE
 ; WRITTEN TO DISK BEFORE LEAVING 'PUT'
@@ -738,15 +738,15 @@ LC4C7           ASL         ,S              ; SET FILE TYPE TO OUTPUT
                 STX         V978            ; SAVE IT AS FIRST FREE DIRECTORY ENTRY
 
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
 LC4E1           JSR         >LC567          ; SET UP NEW DIRECTORY ENTRY ON DISK
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 LC4E1           BSR         LC567           ; SET UP NEW DIRECTORY ENTRY ON DISK
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 BSR         LC538           ; INITIALIZE FILE BUFFER
                 BRA         LC4BB           ; FLAG AND MAP FCB AS BEING USED
@@ -768,7 +768,7 @@ LC504           LDB         #2*29           ; 'OUT OF BUFFER SPACE' ERROR
 LC509           PSHS        B,A             ; SAVE END OF RANDOM BUFFER ON STACK
                 TST         V973            ; DID THIS FILE EXIST
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 BNE         LC514           ; BRANCH IF SO
                 BSR         LC567           ; SET UP NEW FILE IN DIRECTORY
@@ -777,12 +777,12 @@ LC514           LDA         #$FF            ; SET FILE TYPE MATCH = $FF (ILLEGAL
                 JSR         >LC807          ; THIS WILL FORCE ANY OPEN MATCHED FILE TO CAUSE
                                             ; A 'FILE ALREADY OPEN' ERROR
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 BNE         LC519           ; BRANCH IF SO
                 BSR         LC567           ; SET UP NEW FILE IN DIRECTORY
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 LC519           BSR         LC52D           ; INITIALIZE FCB
@@ -1053,21 +1053,21 @@ LC71E           LDU         #DBUF0          ; POINT U TO DISK BUFFER 0 AND
                 JSR         >LA59A          ; MOVE ACCB BYTES FROM FAT RAM IMAGE TO DBUF0
 ; ZERO OUT ALL OF THE BYTES IN THE FAT SECTOR WHICH DO NOT CONTAIN THE GRANULE DATA
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
 LC739           CLR         ,U+             ; CLEAR A BYTE
                 CMPU        #DBUF0+SECLEN   ; FINISHED THE WHOLE SECTOR?
                 BNE         LC739           ; NO
                 JMP         >LD6F2          ; WRITE A SECTOR
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 LC739           CLR         ,X+             ; THIS IS A BUG; SHOULD BE CLR ,U+
                 CMPX        #DBUF0+SECLEN   ; MORE OF THE SAME BUG; SHOULD BE CMPU
                 ; BNE LC739 THIS INSTRUCTION HAS BEEN LEFT OUT
                 JMP         >LD6F2          ; WRITE A SECTOR
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 ; ENTER WITH ACCB CONTAINING FILE NUMBER (1-15); EXIT WITH X POINTING
@@ -1243,7 +1243,7 @@ DVEC6           LDA         #OUTFIL         ; OUTPUT FILE TYPE
 ; THIS IS THE SAME AS LEAS 2,S AND PSHS X
                 JSR         >LC744          ; POINT X TO FCB
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 PSHS        B,A             ; SAVE ACCB AND FILE TYPE ON STACK
                 LDA         FCBTYP,X        ; GET FILE TYPE
@@ -1254,7 +1254,7 @@ DVEC6           LDA         #OUTFIL         ; OUTPUT FILE TYPE
                 BNE         LC845           ; 'FILE MODE' ERROR IF NOT
 LC866           PULS        A,B,X,PC        ; RESTORE ACCB,X,ACCA (FILE TYPE) AND RETURN
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 PSHS        A               ; SAVE FILE TYPE ON STACK
                 LDA         FCBTYP,X        ; GET FILE TYPE
@@ -1265,11 +1265,11 @@ LC866           PULS        A,B,X,PC        ; RESTORE ACCB,X,ACCA (FILE TYPE) AN
                 BNE         LC845           ; 'FILE MODE' ERROR IF NOT
 LC866           PULS        A,X,PC          ; RETURN
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
 LC868           LDX         $04,S           ; GET CALLING ADDRESS FROM THE STACK AND
                 CMPX        #LB00C          ; RETURN UNLESS COMING FROM
@@ -1285,19 +1285,19 @@ LC881           LDX         #LB01E          ; GET MODIFIED REENTRY POINT INTO BA
                 STX         $04,S           ; AND PUT IT INTO THE RETURN ADDRESS ON THE STACK
                 PULS        A,B,X,PC        ; RETURN TO BASIC
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
 NEAREST_RTS     set         LC8AF
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 NEAREST_RTS     set         LC806
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 ; DEVICE NUMBER VALIDITY CHECK RAM HOOK
@@ -1323,7 +1323,7 @@ DVEC11          TST         DEVNUM          ; CHECK DEVICE NUMBER AND RETURN
 LC8AF           RTS                         ; = DO A BREAK CHECK IF DISK FILE
 
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
 ; COMMAND INTERPRETATION RAM HOOK
 DVEC20          LEAS        $02,S           ; PURGE RETURN ADDRESS OFF OF THE STACK
@@ -1368,7 +1368,7 @@ LC905           TFR         B,CC            ; RESTORE STATUS REGISTER
                 JSR         >LADC6          ; LOOP THROUGH BASIC'S MAIN INTERPRETATION LOOP
                 BRA         LC8B2
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 ; EOF RAM HOOK
@@ -1383,15 +1383,15 @@ DVEC14          LEAS        $02,S           ; PURGE RETURN ADDRESS OFF OF THE ST
                 LDB         FCBTYP,X        ; GET FILE TYPE
                 CMPB        #RANFIL         ; RANDOM FILE?
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 LBEQ        LA616           ; 'FM' BAD FILE MODE ERROR IF RANDOM
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 BEQ         LC845           ; 'BAD FILE MODE' ERROR IF RANDOM
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 CLRB                        ;  FILE NOT EMPTY FLAG - SET TO NOT EMPTY
                 LDA         FCBCFL,X        ; CHECK THE CACHE FLAG - BRANCH IF
@@ -1637,11 +1637,11 @@ LCB06           STX         FCBTMP          ; SAVE FILE BUFFER POINTER
                 LDA         #$80            ; SET THE PRE-SAVED BIT TO INDICATE THAT THE DATA
 ; HAS ALREADY BEEN SAVED ON DISK
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 ORA         FCBCPT,X        ; 'OR' IN THE FULL SECTOR FLAG
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 STD         FCBLST,X        ; SAVE THE NUMBER OF BYTES USED IN THE LAST SECTOR
                 INC         FCBSEC,X        ; INCREMENT THE SECTOR NUMBER
@@ -1652,19 +1652,19 @@ LCB06           STX         FCBTMP          ; SAVE FILE BUFFER POINTER
                 INC         FATCON,X        ; INCREMENT GRANULE DATA (ADD ONE SECTOR TO LAST
 ; GRANULE) SKIP PAST THE SIX FAT CONTROL BYTES
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
 LCB2E           JMP         >LCBC3          ; UPDATE FAT AND DIRECTORY
 LCB31           CMPA        #RANFIL         ; RANDOM FILE?
                 BNE         LCB2E           ; NO - UPDATE FAT AND DIRECTORY IF SEQUENTIAL INPUT FILE
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 BRA         LCBC3           ; UPDATE FAT AND DIRECTORY
 LCB31           CMPA        #RANFIL         ; RANDOM FILE?
                 BNE         LCBC3           ; NO - UPDATE FAT AND DIRECTORY
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 ; CLOSE A RANDOM FILE
                 LDD         FCBRLN,X        ; GET RECORD LENGTH
@@ -1672,11 +1672,11 @@ LCB31           CMPA        #RANFIL         ; RANDOM FILE?
                 LEAY        D,X             ; POINT Y TO END OF RANDOM FILE BUFFER
                 PSHS        Y,X,B,A         ; SAVE POINTERS ON STACK
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 LEAY        ,S              ; POINT Y CURRENT STACK POINTER
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 LDU         VARTAB          ; GET START OF VARIABLES
 LCB41           CMPU        ARYTAB          ; COMPARE TO START OF ARRAYS
@@ -1690,15 +1690,15 @@ LCB4E           LEAU        $05,U           ; MOVE POINTER TO NEXT VARIABLE
 LCB52           PULS        U               ; GET ADDRESS OF NEXT ARRAY TO U
 LCB54           CMPU        ARYEND          ; COMPARE TO END OF ARRAYS
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 BEQ         LCB93           ; BRANCH IF END OF ARRAYS
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 BEQ         LCBB2           ; BRANCH IF END OF ARRAYS
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 TFR         U,D             ; SAVE ARRAY START IN ACCD, ADD OFFSET
                 ADDD        $02,U           ; TO NEXT ARRAY AND SAVE ADDRESS OF
@@ -1725,7 +1725,7 @@ LCB76           LDX         $02,U           ; POINT X TO START OF STRING
                 CMPX        RNBFAD          ; COMPARE TO START OF FREE RANDOM FILE BUFFER AREA
                 BHS         LCB8B           ; RETURN IF > START OF FREE RANDOM FILE BUFFER AREA
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 CMPX        $02,Y           ; COMPARE TO START OF THIS FILE'S RANDOM BUFFER
                 BLO         LCB8B           ; RETURN IF < START OF THIS FILE'S RANDOM BUFFER
@@ -1734,7 +1734,7 @@ LCB76           LDX         $02,U           ; POINT X TO START OF STRING
                 TFR         X,D             ; SAVE POINTER IN ACCD
                 SUBD        ,Y              ; SUBTRACT RECORD LENGTH FROM START OF STRING ADDRESS
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 CMPX        $04,S           ; COMPARE TO START OF THIS FILE'S RANDOM BUFFER
                 BLO         LCB8C           ; BRANCH IF < START OF THIS FILE'S RANDOM BUFFER
@@ -1744,7 +1744,7 @@ LCB76           LDX         $02,U           ; POINT X TO START OF STRING
                 TFR         X,D             ; SAVE POINTER IN ACCD
                 SUBD        $02,S           ; SUBTRACT RECORD LENGTH FROM START OF STRING ADDRESS
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 STD         $02,U           ; SAVE NEW START OF STRING ADDRESS
 LCB8B           RTS
@@ -1753,7 +1753,7 @@ LCB8C           CLR         ,U              ; CLEAR THE LENGTH OF THE STRING
                 CLR         $03,U           ; OF THE STRING
                 RTS
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
 ; REMOVE RESERVED SPACE IN RANDOM FILE BUFFER FOR A 'CLOSED' RANDOM FILE
 ; ADJUST THE START OF RANDOM FILE BUFFER POINTER IN ALL RANDOM FCBS
@@ -1773,7 +1773,7 @@ LCBAD           PULS        B               ; GET THE FILES COUNTER
                 DECB                        ;  DECREMENT FILES COUNTER
                 BNE         LCB97           ; BRANCH IF ALL FILES NOT DONE
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 LCBB2           PULS        A,B,X,U         ; U = END OF RANDOM FILE BUFFER, X = START OF RANDOM
 
@@ -1879,11 +1879,11 @@ LCC6A           PULS        A,B,X,PC
 LCC6C           PSHS        U,Y             ; SAVE REGISTERS
                 STA         SECLEN+FCBCON-1,X ; STORE LAST CHARACTER IN BUFFER
 ; -----------------------------------------------------------------------------
-                if          VERDISK<11
+                IFLT        VERDISK-11
 ; -----------------------------------------------------------------------------
                 JSR         LC685           ; INCREMENT RECORD NUMBER
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 LDB         FCBDRV,X        ; GET DRIVE NUMBER AND SAVE
                 STB         DCDRV           ; IT IN DSKCON CONTROL TABLE
@@ -1899,7 +1899,7 @@ LCC6C           PSHS        U,Y             ; SAVE REGISTERS
                 BLO         LCC99           ; BRANCH IF NOT AT END OF GRANULE
 
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 DEC         FCBSEC,Y        ; DECREMENT SECTOR NUMBER AND INCREMENT ERROR FLAG IN
                 INC         FCBCPT,Y        ; CASE ERROR FOUND WHILE LOOKING FOR NEXT GRANULE
@@ -1918,7 +1918,7 @@ LCC99           ORA         #$C0            ; FORCE GRANULE NUMBER TO BE FINAL G
                 PULS        Y,U             ; RESTORE REGISTERS
                 PULS        A,B,X,PC        ; RESTORE REGISTERS AND RETURN
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 CLR         FCBSEC,Y        ; CLEAR SECTOR NUMBER
                 JSR         LC7BF           ; GET NEXT FREE GRANULE
@@ -1930,7 +1930,7 @@ LCC99           ORA         #$C0            ; FORCE GRANULE NUMBER TO BE FINAL G
                 PULS        Y,U             ; RESTORE REGISTERS
                 PULS        A,B,X,PC        ; RESTORE REGISTERS AND RETURN
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 ; DIR COMMAND
@@ -2111,20 +2111,20 @@ MKN             JSR         >LB143          ; 'TM' ERROR IF VALTYP=STRING
                 JMP         >LB69B          ; SAVE STRING DESCRIPTOR ON STRING STACK
 ; LOC COMMAND
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
 LOC             BSR         LCE19           ; POINT X TO FILE BUFFER
                 LDD         FCBREC,X        ; GET RECORD NUMBER (RANDOM FILE) OR SECTOR CTR (SEQUENTIAL)
 DKACCDTOFPA0    STD         FPA0+2          ; SAVE ACCD IN BOTTOM 2 BYTES OF FPA0 AND
                 JMP         >L880E          ; CONVERT TO FLOATING POINT NUMBER
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 LOC             BSR         LCE19           ; POINT X TO FILE BUFFER
                 LDD         FCBREC,X        ; GET RECORD NUMBER (RANDOM FILE) OR SECTOR CTR (SEQUENTIAL)
 DKACCDTOFPA0    JMP         GIVABF          ; PUT ACCD IN FPA0
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 ; STRIP A DEVICE NUMBER FROM A BASIC STATEMENT, SET PRINT
 ; PARAMETERS ACCORDING TO IT - ERROR IF FILE NOT
@@ -2544,11 +2544,11 @@ FILES           JSR         >L95AC          ; RESET SAM DISPLAY PAGE AND VDG MOD
 LD181           JSR         SYNCOMMA        ; SYNTAX CHECK FOR COMMA
                 JSR         >LB3E6          ; EVALUATE EXPRESSION, RETURN VALUE IN ACCD
 ; -----------------------------------------------------------------------------
-                if          VERDISK<11
+                IFLT        VERDISK-11
 ; -----------------------------------------------------------------------------
                 ADDD        #$0001          ; ADD ONE BYTE
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 STD         $01,S           ; SAVE RANDOM FILE BUFFER SIZE ON STACK
 LD189           JSR         DVEC7           ; CLOSE FILES
@@ -2568,14 +2568,14 @@ LD199           ADDD        #FCBLEN         ; FCBLEN REQUIRED FOR EACH BUFFER
 ; (COPY, BACKUP, MERGE ETC.) MAY ACCESS THIS BUFFER.
                 TSTB                        ;  AT AN EXACT 256 BYTE BOUNDARY?
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 BEQ         LD1A8           ; YES
                 INCA                        ;  NO - ADD 256
                 BEQ         LD208           ; 'OUT OF MEMORY' ERROR IF PAST $FFFF
 LD1A8           BITA        #$01            ; ON A 512 BYTE BOUNDARY?
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 BEQ         LD1AF           ; YES
                 INCA                        ;  NO - ADD 256
@@ -2609,7 +2609,7 @@ LD1AF           STA         ,S              ; SAVE MS BYTE OF NEW GRAPHIC RAM ST
                 STB         FCBACT          ; NUMBER OF FILE BUFFERS
                 STU         FCBADR          ; START OF FILE BUFFERS
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 LDA         CURLIN          ; GET CURRENT LINE NUMBER
                 INCA                        ;  ARE WE IN DIRECT MODE?
@@ -2619,7 +2619,7 @@ LD1AF           STA         ,S              ; SAVE MS BYTE OF NEW GRAPHIC RAM ST
                 ADDD        CHARAD          ; ADD OLD INPUT POINTER
                 STD         CHARAD          ; SAVE NEW INPUT POINTER
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 LD1EF           LDU         VARTAB          ; POINT U TO OLD START OF VARIABLES
                 STX         VARTAB          ; SAVE NEW START OF VARIBLES
@@ -2843,15 +2843,15 @@ LD3CE           BSR         LD399           ; SAVE DESTINATION FILENAME.EXT & DR
 ; COUNT THE NUMBER OF SECTORS WORTH OF FREE RAM AVAILABLE
                 CLR         ,-S             ; CLEAR A SECTOR COUNTER ON THE STACK
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 LEAX        -SECLEN,S       ; POINT X ONE SECTOR LENGTH DOWN FROM THE TOP OF STACK
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 LEAX        -100,S          ; BUG ; * THIS SHOULD BE $100 TO POINT X ONE SECTOR LENGTH BELOW STACK
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 LD3DC           INC         ,S              ; INCREMENT SECTOR COUNTER
                 LEAX        -SECLEN,X       ; DECREMENT X BY ONE SECTOR
@@ -3117,11 +3117,11 @@ LD5CE           INCA                        ;  INCREMENT PHYSICAL SECTOR NUMBER
                 LDA         #$00            ; YOU COULD DELETE THIS INSTRUCTION AND CHANGE FOLLOWING STA TO CLR
                 STA         DCOPC           ; RESTORE HEAD TO TRACK ZERO DSKCON OP CODE
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 CLR         DCTRK           ; SET DSKCON TRACK VARIABLE TO TRACK ZERO
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 JSR         >LD6F2          ; RESTORE HEAD TO TRACK ZERO
                 CLR         RDYTMR          ; RESET THE READY TIMER
@@ -3129,18 +3129,18 @@ LD5CE           INCA                        ;  INCREMENT PHYSICAL SECTOR NUMBER
                 STA         FDCREG          ;
                 JSR         >LD7D1          ; CHECK DRIVE READY - WAIT UNTIL READY
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
                 BEQ         LD620           ; BRANCH IF DRIVES READY
                 JMP         >LD688          ; ERROR IF DRIVES NOT READY
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 LBNE        LD688           ; BRANCH IF NOT READY - ISSUE AN ERROR
                 CLR         DCTRK           ; RESET TRACK NUMBER
                 BRA         LD620           ; START THE FORMATTING PROCESS
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 LD606           CMPA        #22             ; CHECK FOR TRACK 22 (PRECOMPENSATION)
                 BLO         LD612           ; AND BRANCH IF < TRACK 22 - NO PRECOMP
@@ -3263,13 +3263,13 @@ LD6D4           FCB         8,0             ; SYNC FIELD
                 FCB         1,$F7           ; CRC REQUEST
                 FCB         24,$4E          ; GAP III (POST DATA GAP)
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
 ; DOS COMMAND
 DOS             BNE         LD742           ; RETURN IF ARGUMENT GIVEN
                 JMP         [DOSVEC]        ; JUMP TO THE DOS COMMAND
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 LD6F2           PSHS        B               ; SAVE ACCB
                 LDB         #$05            ; 5 RETRIES
@@ -3513,7 +3513,7 @@ DIRQSV          LDA         PIA0+3          ; 63.5 MICRO SECOND OR 60 HZ INTERRU
 LD8CD           JMP         >L8955          ; JUMP TO EXTENDED BASIC'S IRQ HANDLER
 
 ; -----------------------------------------------------------------------------
-                if          VERDISK>10
+                IFGT        VERDISK-10
 ; -----------------------------------------------------------------------------
 
 ; THIS IS THE END OF DISK BASIC (EXCEPT FOR THE DOS COMMAND AT $DF00).
@@ -3673,7 +3673,7 @@ END             RTS
                 FCB         $98,$C4,$07,$44,$44,$44,$39
 
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 
 ; THIS IS THE END OF DISK BASIC.
@@ -3814,5 +3814,5 @@ END             RTS
 
 
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
diff --git a/extbas.asm b/extbas.asm
index 9804ab0..b6248ba 100644
--- a/extbas.asm
+++ b/extbas.asm
@@ -88,15 +88,15 @@ L80B8           LDX         #XBWMST         ; GET EXBAS WARM START (RESET) VECTO
                 JMP         >LA0E2          ; SET WARM START FLAG, ENTER BASIC
 ; EXBAS WARM START ENTRY POINT
 ; -----------------------------------------------------------------------------
-                if          VEREXTBAS<20
+                IFLT        VEREXTBAS-20
 ; -----------------------------------------------------------------------------
 XBWMST          NOP                         ;  WARM START ENABLE
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 XBWMST          FCB         $ff
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
                 CLR         PLYTMR
@@ -109,7 +109,7 @@ XBWMST          FCB         $ff
 
 
 ; -----------------------------------------------------------------------------
-                if          VEREXTBAS<11
+                IFLT        VEREXTBAS-11
 ; -----------------------------------------------------------------------------
 ; THIS CODE IS NOT USED BY ANY OF THE BASICS
 L80D0           LDA         PIA1+2          ; READ PIA PORT B
@@ -119,7 +119,7 @@ L80D0           LDA         PIA1+2          ; READ PIA PORT B
 L80DA           JMP         ,X              ; JUMP TO ADDRESS IN X REG
                 FCB         $00,$00         ; DEAD SPACE
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 ; THIS CODE IS A PATCH TO FIX THE PCLEAR BUG
 L80D0           LDA         CURLIN          ; GET THE CURRENT LINE NUMBER
@@ -131,7 +131,7 @@ L80D0           LDA         CURLIN          ; GET THE CURRENT LINE NUMBER
                 STD         CHARAD          ; SAVE NEW BASIC INPUT POINTER
 L80DD           RTS
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 
@@ -147,21 +147,21 @@ L80E8           FCC         "EXTENDED COLOR BASIC "
 
 
 ; -----------------------------------------------------------------------------
-                if          VEREXTBAS<11
+                IFLT        VEREXTBAS-11
 ; -----------------------------------------------------------------------------
                 FCC         "1.0"           ; MINOR VERSION NUMBER
 ; -----------------------------------------------------------------------------
-                else
-                if          VEREXTBAS<20
+                ELSE
+                IFLT        VEREXTBAS-20
 ; -----------------------------------------------------------------------------
                 FCC         "1.1"           ; MINOR VERSION NUMBER
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 FCC         "2.0"           ; MINOR VERSION NUMBER
 ; -----------------------------------------------------------------------------
-                endif
-                endif
+                ENDC
+                ENDC
 ; -----------------------------------------------------------------------------
 
 
@@ -169,21 +169,21 @@ L80E8           FCC         "EXTENDED COLOR BASIC "
 L8100           FCB         CR
 
 ; -----------------------------------------------------------------------------
-                if          VEREXTBAS<11
+                IFLT        VEREXTBAS-11
 ; -----------------------------------------------------------------------------
 L8101           FCC         "COPYRIGHT (C) 1981 BY TANDY" ; COPYRIGHT YEAR
 ; -----------------------------------------------------------------------------
-                else
-                if          VEREXTBAS<20
+                ELSE
+                IFLT        VEREXTBAS-20
 ; -----------------------------------------------------------------------------
 L8101           FCC         "COPYRIGHT (C) 1982 BY TANDY" ; COPYRIGHT YEAR
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 L8101           FCC         "COPR. 1982, 1986 BY TANDY  " ; COPYRIGHT YEAR
 ; -----------------------------------------------------------------------------
-                endif
-                endif
+                ENDC
+                ENDC
 ; -----------------------------------------------------------------------------
 
 
@@ -1509,13 +1509,13 @@ DLOAD           JSR         >LA429          ; CLOSE FILES
 
 
 ; -----------------------------------------------------------------------------
-                if          VEREXTBAS<20
+                IFLT        VEREXTBAS-20
 ; -----------------------------------------------------------------------------
 
 
 
 ; -----------------------------------------------------------------------------
-                if          VEREXTBAS<11
+                IFLT        VEREXTBAS-11
 ; -----------------------------------------------------------------------------
 ; the DLOAD bug. the code in version 1.0 did not allow for the fact
 ; that the current basic input character was not in ACCA following the
@@ -1526,7 +1526,7 @@ DLDBUG          CLR         ,-S             ; SAVE DEFAULT TOKEN (NON DLOADM) ON
                 BNE         L8C25           ; NO
                 STA         ,S              ; SAVE THE M ON THE STACK
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 ; patch to fix the DLOAD bug.
 
@@ -1535,7 +1535,7 @@ DLDBUG          JSR         GETCCH          ; GET THE CURRENT INPUT CHARACTER
                 PSHS        A               ; SAVE DLOADM (=0), OLOAD (<>0) FLAG
                 BNE         L8C25           ; BRANCH IF OLOAD
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
                 JSR         GETNCH          ; GET AN INPUT CHAR FROM BASIC
@@ -1563,23 +1563,23 @@ L8C44           JSR         >L8CD0          ; TRANSMIT FILE NAME AND READ IN FIL
 
 
 ; -----------------------------------------------------------------------------
-                if          VEREXTBAS<11
+                IFLT        VEREXTBAS-11
 ; -----------------------------------------------------------------------------
                 BNE         L8C85           ; DLOADM
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 ; BNE became BEQ as necessitated by the previous fix to DLOAD
                 BEQ         L8C85           ; DLOADM
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 ; READ IN A DLOAD FILE
                 JSR         >LA5C7          ; CHECK FOR END OF LINE - SYNTAX ERROR IF NOT
 
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 ; Version 2.0 (see coco3.asm)
 DLDBUG          ORCC        #$50            ; DISABLE INTERRUPTS
@@ -1608,7 +1608,7 @@ L8C4F           PULS        CC
                 NOP                         ;
                 FCB         $C7
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 
@@ -2324,13 +2324,13 @@ L9177           INCA                        ;  ADD ONE TO TENS DIGIT COUNTER
 
 
 ; -----------------------------------------------------------------------------
-                if          VEREXTBAS<11
+                IFLT        VEREXTBAS-11
 ; -----------------------------------------------------------------------------
                 SUBB        #12             ; SUBTRACT 12 FROM EXPONENT AND ADD ONE TO TENS
                 BCC         L9177           ; DIGIT IF NO CARRY. TENS DIGIT DONE IF THERE IS A CARRY
                 ADDB        #'9'+3          ; ADD ASCII BIAS TO UNITS DIGIT
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 ; fix minor bug in the ascii to floating point conversion in PRINT USING
 
@@ -2338,7 +2338,7 @@ L9177           INCA                        ;  ADD ONE TO TENS DIGIT COUNTER
                 BCC         L9177           ; DIGIT IF NO CARRY. TENS DIGIT DONE IF THERE IS A CARRY
                 ADDB        #'9'+1          ; ADD ASCII BIAS TO UNITS DIGIT
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 
@@ -3050,7 +3050,7 @@ PMODETOK        CMPA        #',             ; CHECK FOR COMMA - FIRST ARGUMENT M
 
 
 ; -----------------------------------------------------------------------------
-                if          VEREXTBAS<11
+                IFLT        VEREXTBAS-11
 ; -----------------------------------------------------------------------------
 ; supposed to be start of graphic ram. patched later to not be hardcoded value
 ;
@@ -3060,11 +3060,11 @@ PMODETOK        CMPA        #',             ; CHECK FOR COMMA - FIRST ARGUMENT M
 
                 LDA         6               ; hardcoded start of graphic ram $600
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 LDA         GRPRAM          ; GET THE START OF GRAPHIC RAM
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 
@@ -3135,7 +3135,7 @@ PCLEAR          JSR         EVALEXPB        ; EVALUATE EXPRESSION, RETURN VALUE
 
 
 ; -----------------------------------------------------------------------------
-                if          VEREXTBAS<11
+                IFLT        VEREXTBAS-11
 ; -----------------------------------------------------------------------------
 ; THIS CODE REFLECTS THE INFAMOUS PCLEAR BUG
                 LBLO        LB44A           ; IF TRYING TO CLEAR LESS THAN END OF CURRENT PAGE = 'ILLEGAL FUNCTION CALL'
@@ -3146,7 +3146,7 @@ PCLEAR          JSR         EVALEXPB        ; EVALUATE EXPRESSION, RETURN VALUE
                 SUBD        FRETOP          ; SUBTRACT OUT TOP OF CLEARED SPACE
                 BCC         L966D           ; NO ROOM LEFT - 'ILLEGAL FUNCTION CALL'
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 ; THIS CODE REFLECTS THE INFAMOUS PCLEAR BUG
                 BLO         L966D           ; FC ERROR IF TRYING TO CLEAR < END OF GRAPHIC RAM
@@ -3159,7 +3159,7 @@ PCLEAR          JSR         EVALEXPB        ; EVALUATE EXPRESSION, RETURN VALUE
                 JSR         >L80D0          ; ADJUST BASICS INPUT POINTER
                 NOP                         ;  SPACE FILLER FOR EXBAS 1.1
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 
diff --git a/supbas.asm b/supbas.asm
index 134cf22..5525edb 100644
--- a/supbas.asm
+++ b/supbas.asm
@@ -339,30 +339,30 @@ WAITLOOP        BRA         WAITLOOP        ; ENDLESS WAIT LOOP
 
 ; IMAGES OF THE VIDEO CONTROL REGISTERS (FF98-FF9F)
 ; -----------------------------------------------------------------------------
-                if          COCOPAL<1
+                IFLT        COCOPAL-1
 ; -----------------------------------------------------------------------------
 VIDIMAGE        FCB         $00,$00,$00,$00,$0F,$E0,$00,$00
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 VIDIMAGE        FCB         $08,$00,$00,$00,$0F,$E0,$00,$00
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 
 
 ; IMAGES OF THE PALETTE REGISTERS (FFB0-FFBF)
 ; -----------------------------------------------------------------------------
-                if          COCOPAL<1
+                IFLT        COCOPAL-1
 ; -----------------------------------------------------------------------------
 PALIMAGE        FCB         $12,$24,$0B,$07,$3F,$1F,$09,$26 ; pal regs #0-7
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 PALIMAGE        FCB         $12,$36,$09,$24,$3F,$1B,$2D,$26 ; pal regs #0-7
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
                 FCB         $00,$12,$00,$3F,$00,$12,$00,$26 ; pal regs #8-15
 
@@ -552,7 +552,7 @@ ENDMOVE         =           *               ; THE END OF THE DATA THAT'S COPIED
 
 
 ; -----------------------------------------------------------------------------
-                if          COCOPAL<1
+                IFLT        COCOPAL-1
 ; -----------------------------------------------------------------------------
 ; UNUSED GARBAGE BYTES?
                 FCB         $FF,$FF,$FF,$FF
@@ -566,7 +566,7 @@ ENDMOVE         =           *               ; THE END OF THE DATA THAT'S COPIED
                 FCB         $00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
                 FCB         $00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 ; UNUSED GARBAGE BYTES?
                 FCB         $5E,$60,$C6,$F0
@@ -580,7 +580,7 @@ ENDMOVE         =           *               ; THE END OF THE DATA THAT'S COPIED
                 FCB         $00,$00,$00,$00,$00,$00,$00,$00,$05,$A8,$08,$74,$2B,$72,$8A,$62
                 FCB         $00,$00,$00,$00,$00,$00,$00,$00,$0B,$70,$02,$79,$22,$E0,$0A,$D0
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
                 FCB         $00,$18,$00,$0E,$00
@@ -974,7 +974,7 @@ AUTHPIC         FCB         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,
 ENDPIC          EQU         *               ; THE END OF THE AUTHOR'S PICTURE DATA
 
 ; -----------------------------------------------------------------------------
-                if          COCOPAL<1
+                IFLT        COCOPAL-1
 ; -----------------------------------------------------------------------------
 ; UNUSED GARBAGE BYTES?
                 FCB         $FF,$00,$00,$A0,$27,$00,$00,$00,$00,$00,$00
@@ -1042,7 +1042,7 @@ ENDPIC          EQU         *               ; THE END OF THE AUTHOR'S PICTURE DA
                 FCB         $00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
                 FCB         $00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 ; UNUSED GARBAGE BYTES?
                 FCB         $FF,$00,$00,$A0,$27,$0D,$71,$01,$00,$02,$00
@@ -1110,7 +1110,7 @@ ENDPIC          EQU         *               ; THE END OF THE AUTHOR'S PICTURE DA
                 FCB         $00,$18,$40,$00,$00,$00,$01,$10,$95,$1E,$05,$90,$8F,$15,$A5,$F4
                 FCB         $90,$1E,$01,$00,$00,$00,$00,$40,$6F,$E1,$BE,$FF,$FF,$FB,$DE,$F7
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 
@@ -1150,15 +1150,15 @@ SETTEXT         PSHS        Y,X,A
 IM.TEXT         FCB         COCO+MMUEN+MC3+MC2 ; FF90
 
 ; -----------------------------------------------------------------------------
-                if          COCOPAL<1
+                IFLT        COCOPAL-1
 ; -----------------------------------------------------------------------------
                 FCB         $00
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 FCB         $08             ; $00 | $08
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
                 FCB         $00,$00,$00,$0F,$E0 ; FF98
@@ -1167,15 +1167,15 @@ IM.TEXT         FCB         COCO+MMUEN+MC3+MC2 ; FF90
 SE03B           FCB         MMUEN+MC3+MC2   ; FF90
 
 ; -----------------------------------------------------------------------------
-                if          COCOPAL<1
+                IFLT        COCOPAL-1
 ; -----------------------------------------------------------------------------
                 FCB         $03
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 FCB         $0B             ; $03 | $08
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
                 FCB         $05,$12,$00,$00,$D8 ; FF98
@@ -1184,15 +1184,15 @@ SE03B           FCB         MMUEN+MC3+MC2   ; FF90
 SE044           FCB         MMUEN+MC3+MC2   ; FF90
 
 ; -----------------------------------------------------------------------------
-                if          COCOPAL<1
+                IFLT        COCOPAL-1
 ; -----------------------------------------------------------------------------
                 FCB         $03
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 FCB         $0B             ; $03 | $08
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
                 FCB         $15,$12,$00,$00,$D8 ; FF98
@@ -1219,15 +1219,15 @@ RESTABLE        FCB         $15             ; 320 PIXELS, 4 COLORS
 IM.GRAPH        FCB         MMUEN+MC3+MC2   ; FF90
 
 ; -----------------------------------------------------------------------------
-                if          COCOPAL<1
+                IFLT        COCOPAL-1
 ; -----------------------------------------------------------------------------
                 FCB         $80
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 FCB         $88             ; $80 | $08
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
                 FCB         $00,$00,$00,$00,$C0 ; FF98
@@ -1236,15 +1236,15 @@ IM.GRAPH        FCB         MMUEN+MC3+MC2   ; FF90
 SE079           FCB         MMUEN+MC3+MC2   ; FF90
 
 ; -----------------------------------------------------------------------------
-                if          COCOPAL<1
+                IFLT        COCOPAL-1
 ; -----------------------------------------------------------------------------
                 FCB         $80
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 FCB         $88             ; $80 | $08
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
                 FCB         $00,$00,$00,$00,$C0 ; FF98
@@ -1818,15 +1818,15 @@ SE600           CMPA        #$F6            ; 'CMP' TOKEN?
 ; CMP ENTRY POINT - SET THE PALETTE REGISTERS FOR DEFAULT CMP VALUES
 
 ; -----------------------------------------------------------------------------
-                if          COCOPAL<1
+                IFLT        COCOPAL-1
 ; -----------------------------------------------------------------------------
 SE606           LEAX        >IM.CMP,PCR     ; POINT TO THE DEFAULT CMP PALETTE COLORS
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 SE606           LEAX        >IM.RGB,PCR     ; POINT TO THE DEFAULT CMP PALETTE COLORS
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
                 BRA         SE634           ; PUT THE DATA POINTED TO BY X INTO THE PALETTE REGISTERS
@@ -1876,17 +1876,17 @@ CMP             BRA         SE606
 
 ; MASTER IMAGES USED TO PROGRAM THE CUSTOM CHIP'S PALETTE REGISTERS
 ; -----------------------------------------------------------------------------
-                if          COCOPAL<1
+                IFLT        COCOPAL-1
 ; -----------------------------------------------------------------------------
 IM.PALET        FCB         18,36,11,7,63,31,9,38
                 FCB         0,18,0,63,0,18,0,38
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 IM.PALET        FCB         $12,$36,$09,$24,$3f,$1b,$2d,$26
                 FCB         $00,$12,$00,$3f,$00,$12,$00,$26
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 ; HSCREEN
@@ -4170,17 +4170,17 @@ SFA06           PULS        B               ; GET THE NEW ATTRIBUTE BYTE FROM TH
                 RTS
 
 ; -----------------------------------------------------------------------------
-                if          COCOPAL<1
+                IFLT        COCOPAL-1
 ; -----------------------------------------------------------------------------
 ; UNUSED GARBAGE BYTES?
                 FCB         $00,$00,$00,$00
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
 ; UNUSED GARBAGE BYTES?
                 FCB         $A1,$2A,$C4,$0B
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
 ; UNUSED GARBAGE BYTES?
@@ -4280,7 +4280,7 @@ INT.SWI         EQU         $FEFA
 INT.NMI         EQU         $FEFD
 
 ; -----------------------------------------------------------------------------
-                if          COCOPAL<1
+                IFLT        COCOPAL-1
 ; -----------------------------------------------------------------------------
                 FCB         $00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
                 FCB         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00
@@ -4316,7 +4316,7 @@ INT.NMI         EQU         $FEFD
                 FCB         $00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
                 FDB         $0000
 ; -----------------------------------------------------------------------------
-                else
+                ELSE
 ; -----------------------------------------------------------------------------
                 FCB         $20,$0B,$80,$00,$08,$2E,$40,$04,$F9,$7F,$F7,$DF,$FC,$FF,$FD,$7F
                 FCB         $F1,$7F,$E5,$0F,$F3,$3F,$EB,$BF,$90,$0E,$30,$05,$10,$0E,$70,$05
@@ -4352,7 +4352,7 @@ INT.NMI         EQU         $FEFD
                 FCB         $90,$08,$C0,$09,$C0,$05,$F2,$05,$F5,$0F,$F5,$0F,$F7,$AF,$F3,$8F
                 FDB         $800B
 ; -----------------------------------------------------------------------------
-                endif
+                ENDC
 ; -----------------------------------------------------------------------------
 
                 FDB         INT.SWI3
-- 
